# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tribune_tts_pb2 as tribune__tts__pb2


class TTSStub(object):
  """Techmo Text-To-Speech (TTS) API.

  Service's `Synthesize` method accepts `SynthesizeRequest` object which contains whole phrase to be synthesized.  
  You have to put the phrase as a string in `text` field of `SynthesizeRequest`. The string has to be in orthographic form.

  You can set `SynthesizeConfig`'s fields to specify parameters of synthesis. 
  Service currently supports audio in two formats: sign 16 bit little-endian PCM wave or Ogg Opus. 
  `sample_rate_hertz` can be set to change sampling rate of synthesized audio for wave PCM only.

  `SynthesizeRequest` can be sent to the service via gRPC insecure channel (that does not require authentication).

  `Synthesize` returns synthesized audio in `SynthesizeResponse` as a stream. 
  When reading from the stream you have to check if `SynthesizeResponse` contains `error` field. 
  If it does you can print its `code` and `description`.
  No `error` field in `SynthesizeResponse` means everything worked fine and its `audio` contains byte `content` 
  that can be appended to received audio samples with `sample_rate_hertz` sampling frequency in hertz. 
  When receiving `SynthesizeResponse` with `audio` you have to check if its `end_of_stream` flag is set to true. 
  When it is set to true it means service has finished synthesis and you can save your wave file with received synthesized audio content.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Synthesize = channel.unary_stream(
        '/techmo.tribune.TTS/Synthesize',
        request_serializer=tribune__tts__pb2.SynthesizeRequest.SerializeToString,
        response_deserializer=tribune__tts__pb2.SynthesizeResponse.FromString,
        )


class TTSServicer(object):
  """Techmo Text-To-Speech (TTS) API.

  Service's `Synthesize` method accepts `SynthesizeRequest` object which contains whole phrase to be synthesized.  
  You have to put the phrase as a string in `text` field of `SynthesizeRequest`. The string has to be in orthographic form.

  You can set `SynthesizeConfig`'s fields to specify parameters of synthesis. 
  Service currently supports audio in two formats: sign 16 bit little-endian PCM wave or Ogg Opus. 
  `sample_rate_hertz` can be set to change sampling rate of synthesized audio for wave PCM only.

  `SynthesizeRequest` can be sent to the service via gRPC insecure channel (that does not require authentication).

  `Synthesize` returns synthesized audio in `SynthesizeResponse` as a stream. 
  When reading from the stream you have to check if `SynthesizeResponse` contains `error` field. 
  If it does you can print its `code` and `description`.
  No `error` field in `SynthesizeResponse` means everything worked fine and its `audio` contains byte `content` 
  that can be appended to received audio samples with `sample_rate_hertz` sampling frequency in hertz. 
  When receiving `SynthesizeResponse` with `audio` you have to check if its `end_of_stream` flag is set to true. 
  When it is set to true it means service has finished synthesis and you can save your wave file with received synthesized audio content.
  """

  def Synthesize(self, request, context):
    """Returns audio signal with synthesized speech, given text and optional configuration.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TTSServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Synthesize': grpc.unary_stream_rpc_method_handler(
          servicer.Synthesize,
          request_deserializer=tribune__tts__pb2.SynthesizeRequest.FromString,
          response_serializer=tribune__tts__pb2.SynthesizeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'techmo.tribune.TTS', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
