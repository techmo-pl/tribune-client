# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import tribune_tts_pb2 as tribune__tts__pb2


class TTSStub(object):
  """Service that implements Techmo Text-To-Speech (TTS) API.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListVoices = channel.unary_unary(
        '/techmo.tribune.TTS/ListVoices',
        request_serializer=tribune__tts__pb2.ListVoicesRequest.SerializeToString,
        response_deserializer=tribune__tts__pb2.ListVoicesResponse.FromString,
        )
    self.SynthesizeStreaming = channel.unary_stream(
        '/techmo.tribune.TTS/SynthesizeStreaming',
        request_serializer=tribune__tts__pb2.SynthesizeRequest.SerializeToString,
        response_deserializer=tribune__tts__pb2.SynthesizeResponse.FromString,
        )
    self.Synthesize = channel.unary_unary(
        '/techmo.tribune.TTS/Synthesize',
        request_serializer=tribune__tts__pb2.SynthesizeRequest.SerializeToString,
        response_deserializer=tribune__tts__pb2.SynthesizeResponse.FromString,
        )


class TTSServicer(object):
  """Service that implements Techmo Text-To-Speech (TTS) API.
  """

  def ListVoices(self, request, context):
    """Lists all available voices which can be used to synthesize speech.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SynthesizeStreaming(self, request, context):
    """Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    Returns audio signal with synthesized speech (streaming version, one or more response packets) or `error`.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Synthesize(self, request, context):
    """Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet) or `error`.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TTSServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListVoices': grpc.unary_unary_rpc_method_handler(
          servicer.ListVoices,
          request_deserializer=tribune__tts__pb2.ListVoicesRequest.FromString,
          response_serializer=tribune__tts__pb2.ListVoicesResponse.SerializeToString,
      ),
      'SynthesizeStreaming': grpc.unary_stream_rpc_method_handler(
          servicer.SynthesizeStreaming,
          request_deserializer=tribune__tts__pb2.SynthesizeRequest.FromString,
          response_serializer=tribune__tts__pb2.SynthesizeResponse.SerializeToString,
      ),
      'Synthesize': grpc.unary_unary_rpc_method_handler(
          servicer.Synthesize,
          request_deserializer=tribune__tts__pb2.SynthesizeRequest.FromString,
          response_serializer=tribune__tts__pb2.SynthesizeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'techmo.tribune.TTS', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
