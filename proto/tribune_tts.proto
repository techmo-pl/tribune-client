// Techmo Tribune TTS API  
// version: 2.0.0   
// authors: Dawid Skurzok, Paweł Jaciów, Michał Radziszewski  
// date:    2020-10-05  
syntax = "proto3";

package techmo.tribune;

// Service that implements Techmo Text-To-Speech (TTS) API.
service TTS
{
    // Lists all available voices which can be used to synthesize speech.
    rpc ListVoices(ListVoicesRequest) returns (ListVoicesResponse);

    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (streaming version, one or more response packets) or `error`.
    rpc SynthesizeStreaming(SynthesizeRequest) returns (stream SynthesizeResponse);

    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet) or `error`.
    rpc Synthesize(SynthesizeRequest) returns (SynthesizeResponse);
}

// The  top-level message sent by the client to request listing of available voices.
message ListVoicesRequest
{
    // ISO 639-1 language code. Optional. When defined, limits the listed voices to the voices supprting the requested language.
    string language = 1;
}

// The listing of available voices returned by a `ListVoices` call.
message ListVoicesResponse
{
    // The list of all available voices or voices supproting the requested laguage.
    repeated Voice voices = 1;
}

// The top-level message sent by the client for `Synthesize` and `SynthesizeStreaming` methods.
// It contains a text to be synthesized and a configuration.
// The phrase to synthesize is put as a string in `text` field. The string has to be in orthographic form.
// The string can be either a plain text or SSML (https://w3.org/TR/speech-synthesis11/).
// Currently the following SSML tags are supported:
// `<speak>` - root xml node, with optional `xml:lang` attribute,
// `<prosody>` - supported attributes: `pitch`, `range`, `rate`, and `volume`,
// `<break>` - supported attributes: `strength` and `time`,
// `<emphasis>` - supported attribute: `level`,
// `<say-as>` - supported attribute: `interpret-as` (consult Techmo TTS documentation for the complete list of all available implementations),
// `<lang>` - supported attribute: `xml:lang`,
// `<voice>` - supported attributes: `name`, `gender`, and `age`.
// `SynthesizeConfig`'s fields can be set to specify parameters of synthesis (sampling rate, language, and voice) and a format of the output (PCM16 or Ogg/Vorbis compression).
message SynthesizeRequest
{
    // Text to be synthesized.
    string text = 1;

    // Configuration.
    SynthesizeConfig config = 2;
}

// Provides information to the synthesizer that specifies how to process the request.
message SynthesizeConfig
{
    // Desired sampling frequency in hertz of synthesized audio. The value 0 means use the default Synthesizer sampling rate.
    int32 sample_rate_hertz = 1;

    // Requested format of the output audio stream.
    OutputFormat output_format = 2;

    // ISO 639-1 code of the language of text to be synthesized (may be overriden by SSML tags in request text).
    string language = 3;

    // Optional. Overrides the default synthesized speech parameters
    AudioConfig audio_config = 4;

    // Requested voice to be used to synthesize the text (may be overriden by SSML tags in request text).
    Voice voice = 5;
}

// The requested format of the response audio data.
enum OutputFormat
{
    PCM16 = 0;       // Uncompressed 16-bit signed integer samples.
    OGG_VORBIS = 1;  // Ogg/Vorbis endoded data stream.
}

// Desfines the parameters of synthesized speech.
message AudioConfig
{
    // The average speech pitch scaling factor. 1.0 means default voice pitch.
    float pitch = 1;

    // The speech range scaling factor. 1.0 means default voice range.
    float range = 2;

    // The speech rate (speed) scaling factor. 1.0 means default voice rate.
    float rate = 3;

    // The speech volume. 1.0 means default volume.
    float volume = 4;
}

// Voice definition. If both name and gender is defined, the name takes precedence.
// If only name is defined, the specified voice is loaded.
// If only gender is defined, the default voice for the requested gender is loaded.
message Voice
{
    // The name of the voice (empty string means default voice).
    string name = 1;

    // Gender of the voice (UNSPECIFIED is default).
    Gender gender = 2;
}

// Gender of the voice.
enum Gender
{
    UNSPECIFIED = 0;
    FEMALE = 1;
    MALE = 2;
}

// `SynthesizeResponse` is the only message returned to the client by `Synthesize` and `SynthesizeSync`.
// During `Synthesize`, a series of one or more `SynthesizeResponse` messages are streamed back to the client.
// During `SynthesizeSync` always one message is generated.
// If `SynthesizeResponse` contains `error` field, its `code` and `description` can be printed.
// Otherwise, the synthesized `audio` is available to use.
message SynthesizeResponse
{
    // Audio data corresponding to a portion of the text
    // that is currently being processed.
    AudioData audio = 1;

    // If set, specifies the error for the operation.
    Error error = 2;
}

// Audio data corresponding to a portion of the text
// that is currently being processed.
message AudioData
{
    // Sampling frequency in hertz.
    int32 sample_rate_hertz = 1;

    // Audio data bytes encoded by default as Linear PCM (uncompressed 16-bit signed little-endian samples).
    bytes content = 2;
}

// Indicates the type of the error for the operation.
enum ErrorCode
{
    UNKNOWN = 0;            // Unknown error.
    LICENCE = 1;            // Licence related error.
    TEXT_NORMALIZATION = 2; // Error during text normalization.
    TRANSCRIPTION = 3;      // Error during orthographic to phonetic transcription.
    SYNTHESIS = 4;          // Error during speech synthesis.
}

// Received error details.
message Error
{
    // Error code.
    ErrorCode code = 1;

    // Error description.
    string description = 2;
}

