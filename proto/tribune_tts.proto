// Techmo Tribune TTS API  
// version: 2.0.0   
// authors: Dawid Skurzok, Paweł Jaciów, Michał Radziszewski  
// date:    2018-01-25  
syntax = "proto3";

package techmo.tribune;

// Service that implements Techmo Text-To-Speech (TTS) API.
//
// Service's `Synthesize` method accepts `SynthesizeRequest` object which contains the whole phrase to be synthesized.  
// The phrase to synthesize is put as a string in `text` field of `SynthesizeRequest`. The string has to be in orthographic form.
// The string can be either a plain text or SSML (https://w3.org/TR/speech-synthesis11/).
// Currently the following SSML tags are supported:
// `<speak>` - root xml node, with optional `xml:lang` attribute,
// `<prosody>` - supported attributes: `pitch`, `range`, `rate`, and `volume`,
// `<break>` - supported attributes: `strength` and `time`,
// `<emphasis>` - supported attribute: `level`,
// `<say-as>` - supported attribute: `interpret-as` (consult Techmo TTS documentation for the complete list of all available implementations),
// `<lang>` - supported attribute: `xml:lang`,
// `<voice>` - supported attributes: `name`, `gender`, and `age`.
//
// `SynthesizeConfig`'s fields can be set to specify parameters of synthesis (sampling rate, language, and voice) and a format of the output (PCM16 or Ogg/Vorbis compression).
//
// `SynthesizeRequest` can be sent to the service via gRPC insecure channel (that does not require authentication).
//
// `Synthesize` returns synthesized audio in `SynthesizeResponse` as a stream. When reading from the stream it is necessary to check if `SynthesizeResponse` contains `error` field. If it does its `code` and `description` can be printed. No `error` field in `SynthesizeResponse` means everything worked fine and its `audio` contains byte `content` that can be appended to received audio samples with `sample_rate_hertz` sampling frequency in hertz. When receiving In `SynthesizeResponse` with `audio`, the `end_of_stream` set to true means that service has fnished synthesis. Otherwise further chunks with more audio are expected.
service TTS
{
    // Returns audio signal with synthesized speech, given text and optional configuration.
    rpc Synthesize(SynthesizeRequest) returns (stream SynthesizeResponse);
}

// `SynthesizeRequest` is the top-level message sent by the client for
// the `Synthesize` method. It contains a text to be synthesized and a configuration.
message SynthesizeRequest
{
    // Text to be synthesized.
    string text = 1;

    // Configuration.
    SynthesizeConfig config = 2;
}

// Provides information to the synthesizer that specifies how to process the request.
message SynthesizeConfig
{
    // Desired sampling frequency in hertz of synthesized audio.
    int32 sample_rate_hertz = 1;

    // Requested format of the output audio stream.
    OutputFormat output_format = 2;

    // ISO 639-1 code of the language of text to be synthesized (may be overriden by SSML tags in request text).
    string language = 3;

    // Requested voice to be used to synthesize the text (may be overriden by SSML tags in request text).
    Voice voice = 4;
}

// The requested format of the response audio data.
enum OutputFormat
{
    PCM16 = 0;       // Uncompressed 16-bit signed integer samples.
    OGG_VORBIS = 1;  // Ogg/Vorbis endoded data stream.
}

// Voice definition.
message Voice
{
    // The name of the voice (empty string means default voice).
    string name = 1;

    // Gender of the voice (FEMALE is default).
    Gender gender = 2;

    // Age of the voice (ADULT is default).
    Age age = 3;
}

// Age of the voice.
enum Age
{
    ADULT = 0;
    CHILD = 1;
    OLD = 2;
}

// Gender of the voice.
enum Gender
{
    FEMALE = 0;
    MALE = 1;
}

// `SynthesizeResponse` is the only message returned to the client by
// `Synthesize`. A series of one or more `SynthesizeResponse`
// messages are streamed back to the client.
message SynthesizeResponse
{
    // Audio data corresponding to a portion of the text
    // that is currently being processed.
    AudioData audio = 1;

    // If set, specifies the error for the operation.
    Error error = 2;
}

// Audio data corresponding to a portion of the text
// that is currently being processed.
message AudioData
{
    // Sampling frequency in hertz.
    int32 sample_rate_hertz = 1;

    // Audio data bytes encoded by default as Linear PCM (uncompressed 16-bit signed little-endian samples).
    bytes content = 2;

    // Last message flag. If set to true, no more data will be sent.
    bool end_of_stream = 3;
}

// Indicates the type of the error for the operation.
enum ErrorCode
{
    UNKNOWN = 0;            // Unknown error.
    LICENCE = 1;            // Licence related error.
    TEXT_NORMALIZATION = 2; // Error during text normalization.
    TRANSCRIPTION = 3;      // Error during orthographic to phonetic transcription.
    SYNTHESIS = 4;          // Error during speech synthesis.
}

// Received error details.
message Error
{
    // Error code.
    ErrorCode code = 1;

    // Error description.
    string description = 2;
}

