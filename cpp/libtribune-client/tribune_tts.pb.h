// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tribune_tts.proto

#ifndef PROTOBUF_tribune_5ftts_2eproto__INCLUDED
#define PROTOBUF_tribune_5ftts_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace techmo {
namespace tribune {
class AudioData;
class AudioDataDefaultTypeInternal;
extern AudioDataDefaultTypeInternal _AudioData_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class SynthesizeConfig;
class SynthesizeConfigDefaultTypeInternal;
extern SynthesizeConfigDefaultTypeInternal _SynthesizeConfig_default_instance_;
class SynthesizeRequest;
class SynthesizeRequestDefaultTypeInternal;
extern SynthesizeRequestDefaultTypeInternal _SynthesizeRequest_default_instance_;
class SynthesizeResponse;
class SynthesizeResponseDefaultTypeInternal;
extern SynthesizeResponseDefaultTypeInternal _SynthesizeResponse_default_instance_;
}  // namespace tribune
}  // namespace techmo

namespace techmo {
namespace tribune {

namespace protobuf_tribune_5ftts_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tribune_5ftts_2eproto

enum AudioEncoding {
  LINEAR16 = 0,
  OGG_OPUS = 1,
  AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioEncoding_IsValid(int value);
const AudioEncoding AudioEncoding_MIN = LINEAR16;
const AudioEncoding AudioEncoding_MAX = OGG_OPUS;
const int AudioEncoding_ARRAYSIZE = AudioEncoding_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioEncoding_descriptor();
inline const ::std::string& AudioEncoding_Name(AudioEncoding value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioEncoding_descriptor(), value);
}
inline bool AudioEncoding_Parse(
    const ::std::string& name, AudioEncoding* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioEncoding>(
    AudioEncoding_descriptor(), name, value);
}
enum ErrorCode {
  UNKNOWN = 0,
  LICENCE = 1,
  TEXT_NORMALIZATION = 2,
  TRANSCRIPTION = 3,
  SYNTHESIS = 4,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = UNKNOWN;
const ErrorCode ErrorCode_MAX = SYNTHESIS;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class SynthesizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.tribune.SynthesizeRequest) */ {
 public:
  SynthesizeRequest();
  virtual ~SynthesizeRequest();

  SynthesizeRequest(const SynthesizeRequest& from);

  inline SynthesizeRequest& operator=(const SynthesizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SynthesizeRequest(SynthesizeRequest&& from) noexcept
    : SynthesizeRequest() {
    *this = ::std::move(from);
  }

  inline SynthesizeRequest& operator=(SynthesizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SynthesizeRequest& default_instance();

  static inline const SynthesizeRequest* internal_default_instance() {
    return reinterpret_cast<const SynthesizeRequest*>(
               &_SynthesizeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SynthesizeRequest* other);
  friend void swap(SynthesizeRequest& a, SynthesizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SynthesizeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SynthesizeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SynthesizeRequest& from);
  void MergeFrom(const SynthesizeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SynthesizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // .techmo.tribune.SynthesizeConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::techmo::tribune::SynthesizeConfig& config() const;
  ::techmo::tribune::SynthesizeConfig* mutable_config();
  ::techmo::tribune::SynthesizeConfig* release_config();
  void set_allocated_config(::techmo::tribune::SynthesizeConfig* config);

  // @@protoc_insertion_point(class_scope:techmo.tribune.SynthesizeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::techmo::tribune::SynthesizeConfig* config_;
  mutable int _cached_size_;
  friend struct protobuf_tribune_5ftts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SynthesizeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.tribune.SynthesizeConfig) */ {
 public:
  SynthesizeConfig();
  virtual ~SynthesizeConfig();

  SynthesizeConfig(const SynthesizeConfig& from);

  inline SynthesizeConfig& operator=(const SynthesizeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SynthesizeConfig(SynthesizeConfig&& from) noexcept
    : SynthesizeConfig() {
    *this = ::std::move(from);
  }

  inline SynthesizeConfig& operator=(SynthesizeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SynthesizeConfig& default_instance();

  static inline const SynthesizeConfig* internal_default_instance() {
    return reinterpret_cast<const SynthesizeConfig*>(
               &_SynthesizeConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SynthesizeConfig* other);
  friend void swap(SynthesizeConfig& a, SynthesizeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SynthesizeConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SynthesizeConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SynthesizeConfig& from);
  void MergeFrom(const SynthesizeConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SynthesizeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sample_rate_hertz = 1;
  void clear_sample_rate_hertz();
  static const int kSampleRateHertzFieldNumber = 1;
  ::google::protobuf::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::google::protobuf::int32 value);

  // .techmo.tribune.AudioEncoding encoding = 2;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  ::techmo::tribune::AudioEncoding encoding() const;
  void set_encoding(::techmo::tribune::AudioEncoding value);

  // @@protoc_insertion_point(class_scope:techmo.tribune.SynthesizeConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sample_rate_hertz_;
  int encoding_;
  mutable int _cached_size_;
  friend struct protobuf_tribune_5ftts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SynthesizeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.tribune.SynthesizeResponse) */ {
 public:
  SynthesizeResponse();
  virtual ~SynthesizeResponse();

  SynthesizeResponse(const SynthesizeResponse& from);

  inline SynthesizeResponse& operator=(const SynthesizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SynthesizeResponse(SynthesizeResponse&& from) noexcept
    : SynthesizeResponse() {
    *this = ::std::move(from);
  }

  inline SynthesizeResponse& operator=(SynthesizeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SynthesizeResponse& default_instance();

  static inline const SynthesizeResponse* internal_default_instance() {
    return reinterpret_cast<const SynthesizeResponse*>(
               &_SynthesizeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SynthesizeResponse* other);
  friend void swap(SynthesizeResponse& a, SynthesizeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SynthesizeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SynthesizeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SynthesizeResponse& from);
  void MergeFrom(const SynthesizeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SynthesizeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .techmo.tribune.AudioData audio = 1;
  bool has_audio() const;
  void clear_audio();
  static const int kAudioFieldNumber = 1;
  const ::techmo::tribune::AudioData& audio() const;
  ::techmo::tribune::AudioData* mutable_audio();
  ::techmo::tribune::AudioData* release_audio();
  void set_allocated_audio(::techmo::tribune::AudioData* audio);

  // .techmo.tribune.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::techmo::tribune::Error& error() const;
  ::techmo::tribune::Error* mutable_error();
  ::techmo::tribune::Error* release_error();
  void set_allocated_error(::techmo::tribune::Error* error);

  // @@protoc_insertion_point(class_scope:techmo.tribune.SynthesizeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::techmo::tribune::AudioData* audio_;
  ::techmo::tribune::Error* error_;
  mutable int _cached_size_;
  friend struct protobuf_tribune_5ftts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.tribune.AudioData) */ {
 public:
  AudioData();
  virtual ~AudioData();

  AudioData(const AudioData& from);

  inline AudioData& operator=(const AudioData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioData(AudioData&& from) noexcept
    : AudioData() {
    *this = ::std::move(from);
  }

  inline AudioData& operator=(AudioData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioData& default_instance();

  static inline const AudioData* internal_default_instance() {
    return reinterpret_cast<const AudioData*>(
               &_AudioData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AudioData* other);
  friend void swap(AudioData& a, AudioData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioData* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AudioData& from);
  void MergeFrom(const AudioData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AudioData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int32 sample_rate_hertz = 1;
  void clear_sample_rate_hertz();
  static const int kSampleRateHertzFieldNumber = 1;
  ::google::protobuf::int32 sample_rate_hertz() const;
  void set_sample_rate_hertz(::google::protobuf::int32 value);

  // bool end_of_stream = 3;
  void clear_end_of_stream();
  static const int kEndOfStreamFieldNumber = 3;
  bool end_of_stream() const;
  void set_end_of_stream(bool value);

  // @@protoc_insertion_point(class_scope:techmo.tribune.AudioData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 sample_rate_hertz_;
  bool end_of_stream_;
  mutable int _cached_size_;
  friend struct protobuf_tribune_5ftts_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:techmo.tribune.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .techmo.tribune.ErrorCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::techmo::tribune::ErrorCode code() const;
  void set_code(::techmo::tribune::ErrorCode value);

  // @@protoc_insertion_point(class_scope:techmo.tribune.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int code_;
  mutable int _cached_size_;
  friend struct protobuf_tribune_5ftts_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SynthesizeRequest

// string text = 1;
inline void SynthesizeRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SynthesizeRequest::text() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeRequest.text)
  return text_.GetNoArena();
}
inline void SynthesizeRequest::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.tribune.SynthesizeRequest.text)
}
#if LANG_CXX11
inline void SynthesizeRequest::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tribune.SynthesizeRequest.text)
}
#endif
inline void SynthesizeRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tribune.SynthesizeRequest.text)
}
inline void SynthesizeRequest::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tribune.SynthesizeRequest.text)
}
inline ::std::string* SynthesizeRequest::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:techmo.tribune.SynthesizeRequest.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SynthesizeRequest::release_text() {
  // @@protoc_insertion_point(field_release:techmo.tribune.SynthesizeRequest.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SynthesizeRequest::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.SynthesizeRequest.text)
}

// .techmo.tribune.SynthesizeConfig config = 2;
inline bool SynthesizeRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void SynthesizeRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::techmo::tribune::SynthesizeConfig& SynthesizeRequest::config() const {
  const ::techmo::tribune::SynthesizeConfig* p = config_;
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::techmo::tribune::SynthesizeConfig*>(
      &::techmo::tribune::_SynthesizeConfig_default_instance_);
}
inline ::techmo::tribune::SynthesizeConfig* SynthesizeRequest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::techmo::tribune::SynthesizeConfig;
  }
  // @@protoc_insertion_point(field_mutable:techmo.tribune.SynthesizeRequest.config)
  return config_;
}
inline ::techmo::tribune::SynthesizeConfig* SynthesizeRequest::release_config() {
  // @@protoc_insertion_point(field_release:techmo.tribune.SynthesizeRequest.config)
  
  ::techmo::tribune::SynthesizeConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void SynthesizeRequest::set_allocated_config(::techmo::tribune::SynthesizeConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.SynthesizeRequest.config)
}

// -------------------------------------------------------------------

// SynthesizeConfig

// int32 sample_rate_hertz = 1;
inline void SynthesizeConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::google::protobuf::int32 SynthesizeConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
inline void SynthesizeConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.SynthesizeConfig.sample_rate_hertz)
}

// .techmo.tribune.AudioEncoding encoding = 2;
inline void SynthesizeConfig::clear_encoding() {
  encoding_ = 0;
}
inline ::techmo::tribune::AudioEncoding SynthesizeConfig::encoding() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeConfig.encoding)
  return static_cast< ::techmo::tribune::AudioEncoding >(encoding_);
}
inline void SynthesizeConfig::set_encoding(::techmo::tribune::AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.SynthesizeConfig.encoding)
}

// -------------------------------------------------------------------

// SynthesizeResponse

// .techmo.tribune.AudioData audio = 1;
inline bool SynthesizeResponse::has_audio() const {
  return this != internal_default_instance() && audio_ != NULL;
}
inline void SynthesizeResponse::clear_audio() {
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) delete audio_;
  audio_ = NULL;
}
inline const ::techmo::tribune::AudioData& SynthesizeResponse::audio() const {
  const ::techmo::tribune::AudioData* p = audio_;
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeResponse.audio)
  return p != NULL ? *p : *reinterpret_cast<const ::techmo::tribune::AudioData*>(
      &::techmo::tribune::_AudioData_default_instance_);
}
inline ::techmo::tribune::AudioData* SynthesizeResponse::mutable_audio() {
  
  if (audio_ == NULL) {
    audio_ = new ::techmo::tribune::AudioData;
  }
  // @@protoc_insertion_point(field_mutable:techmo.tribune.SynthesizeResponse.audio)
  return audio_;
}
inline ::techmo::tribune::AudioData* SynthesizeResponse::release_audio() {
  // @@protoc_insertion_point(field_release:techmo.tribune.SynthesizeResponse.audio)
  
  ::techmo::tribune::AudioData* temp = audio_;
  audio_ = NULL;
  return temp;
}
inline void SynthesizeResponse::set_allocated_audio(::techmo::tribune::AudioData* audio) {
  delete audio_;
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.SynthesizeResponse.audio)
}

// .techmo.tribune.Error error = 2;
inline bool SynthesizeResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline void SynthesizeResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
inline const ::techmo::tribune::Error& SynthesizeResponse::error() const {
  const ::techmo::tribune::Error* p = error_;
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::techmo::tribune::Error*>(
      &::techmo::tribune::_Error_default_instance_);
}
inline ::techmo::tribune::Error* SynthesizeResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::techmo::tribune::Error;
  }
  // @@protoc_insertion_point(field_mutable:techmo.tribune.SynthesizeResponse.error)
  return error_;
}
inline ::techmo::tribune::Error* SynthesizeResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.tribune.SynthesizeResponse.error)
  
  ::techmo::tribune::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void SynthesizeResponse::set_allocated_error(::techmo::tribune::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.SynthesizeResponse.error)
}

// -------------------------------------------------------------------

// AudioData

// int32 sample_rate_hertz = 1;
inline void AudioData::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
inline ::google::protobuf::int32 AudioData::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.AudioData.sample_rate_hertz)
  return sample_rate_hertz_;
}
inline void AudioData::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.AudioData.sample_rate_hertz)
}

// bytes content = 2;
inline void AudioData::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioData::content() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.AudioData.content)
  return content_.GetNoArena();
}
inline void AudioData::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.tribune.AudioData.content)
}
#if LANG_CXX11
inline void AudioData::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tribune.AudioData.content)
}
#endif
inline void AudioData::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tribune.AudioData.content)
}
inline void AudioData::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tribune.AudioData.content)
}
inline ::std::string* AudioData::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:techmo.tribune.AudioData.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioData::release_content() {
  // @@protoc_insertion_point(field_release:techmo.tribune.AudioData.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioData::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.AudioData.content)
}

// bool end_of_stream = 3;
inline void AudioData::clear_end_of_stream() {
  end_of_stream_ = false;
}
inline bool AudioData::end_of_stream() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.AudioData.end_of_stream)
  return end_of_stream_;
}
inline void AudioData::set_end_of_stream(bool value) {
  
  end_of_stream_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.AudioData.end_of_stream)
}

// -------------------------------------------------------------------

// Error

// .techmo.tribune.ErrorCode code = 1;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::techmo::tribune::ErrorCode Error::code() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.Error.code)
  return static_cast< ::techmo::tribune::ErrorCode >(code_);
}
inline void Error::set_code(::techmo::tribune::ErrorCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.Error.code)
}

// string description = 2;
inline void Error::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::description() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.Error.description)
  return description_.GetNoArena();
}
inline void Error::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.tribune.Error.description)
}
#if LANG_CXX11
inline void Error::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tribune.Error.description)
}
#endif
inline void Error::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tribune.Error.description)
}
inline void Error::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tribune.Error.description)
}
inline ::std::string* Error::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:techmo.tribune.Error.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_description() {
  // @@protoc_insertion_point(field_release:techmo.tribune.Error.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.Error.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace tribune
}  // namespace techmo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::techmo::tribune::AudioEncoding> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::techmo::tribune::AudioEncoding>() {
  return ::techmo::tribune::AudioEncoding_descriptor();
}
template <> struct is_proto_enum< ::techmo::tribune::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::techmo::tribune::ErrorCode>() {
  return ::techmo::tribune::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tribune_5ftts_2eproto__INCLUDED
