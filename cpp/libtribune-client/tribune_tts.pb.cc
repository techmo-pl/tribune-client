// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tribune_tts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tribune_tts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace techmo {
namespace tribune {
class SynthesizeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SynthesizeRequest>
     _instance;
} _SynthesizeRequest_default_instance_;
class SynthesizeConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SynthesizeConfig>
     _instance;
} _SynthesizeConfig_default_instance_;
class SynthesizeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SynthesizeResponse>
     _instance;
} _SynthesizeResponse_default_instance_;
class AudioDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AudioData>
     _instance;
} _AudioData_default_instance_;
class ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error>
     _instance;
} _Error_default_instance_;

namespace protobuf_tribune_5ftts_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeRequest, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeRequest, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeConfig, sample_rate_hertz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeConfig, encoding_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeResponse, audio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynthesizeResponse, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, sample_rate_hertz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, end_of_stream_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, description_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SynthesizeRequest)},
  { 7, -1, sizeof(SynthesizeConfig)},
  { 14, -1, sizeof(SynthesizeResponse)},
  { 21, -1, sizeof(AudioData)},
  { 29, -1, sizeof(Error)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SynthesizeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SynthesizeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SynthesizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AudioData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tribune_tts.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SynthesizeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SynthesizeRequest_default_instance_);_SynthesizeConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SynthesizeConfig_default_instance_);_SynthesizeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SynthesizeResponse_default_instance_);_AudioData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AudioData_default_instance_);_Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_default_instance_);_SynthesizeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::techmo::tribune::SynthesizeConfig*>(
      ::techmo::tribune::SynthesizeConfig::internal_default_instance());
  _SynthesizeResponse_default_instance_._instance.get_mutable()->audio_ = const_cast< ::techmo::tribune::AudioData*>(
      ::techmo::tribune::AudioData::internal_default_instance());
  _SynthesizeResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::techmo::tribune::Error*>(
      ::techmo::tribune::Error::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021tribune_tts.proto\022\016techmo.tribune\"S\n\021S"
      "ynthesizeRequest\022\014\n\004text\030\001 \001(\t\0220\n\006config"
      "\030\002 \001(\0132 .techmo.tribune.SynthesizeConfig"
      "\"^\n\020SynthesizeConfig\022\031\n\021sample_rate_hert"
      "z\030\001 \001(\005\022/\n\010encoding\030\002 \001(\0162\035.techmo.tribu"
      "ne.AudioEncoding\"d\n\022SynthesizeResponse\022("
      "\n\005audio\030\001 \001(\0132\031.techmo.tribune.AudioData"
      "\022$\n\005error\030\002 \001(\0132\025.techmo.tribune.Error\"N"
      "\n\tAudioData\022\031\n\021sample_rate_hertz\030\001 \001(\005\022\017"
      "\n\007content\030\002 \001(\014\022\025\n\rend_of_stream\030\003 \001(\010\"E"
      "\n\005Error\022\'\n\004code\030\001 \001(\0162\031.techmo.tribune.E"
      "rrorCode\022\023\n\013description\030\002 \001(\t*+\n\rAudioEn"
      "coding\022\014\n\010LINEAR16\020\000\022\014\n\010OGG_OPUS\020\001*_\n\tEr"
      "rorCode\022\013\n\007UNKNOWN\020\000\022\013\n\007LICENCE\020\001\022\026\n\022TEX"
      "T_NORMALIZATION\020\002\022\021\n\rTRANSCRIPTION\020\003\022\r\n\t"
      "SYNTHESIS\020\0042\\\n\003TTS\022U\n\nSynthesize\022!.techm"
      "o.tribune.SynthesizeRequest\032\".techmo.tri"
      "bune.SynthesizeResponse0\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tribune_tts.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tribune_5ftts_2eproto

const ::google::protobuf::EnumDescriptor* AudioEncoding_descriptor() {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_enum_descriptors[0];
}
bool AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_enum_descriptors[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesizeRequest::kTextFieldNumber;
const int SynthesizeRequest::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesizeRequest::SynthesizeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tribune_5ftts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.SynthesizeRequest)
}
SynthesizeRequest::SynthesizeRequest(const SynthesizeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_config()) {
    config_ = new ::techmo::tribune::SynthesizeConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.SynthesizeRequest)
}

void SynthesizeRequest::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = NULL;
  _cached_size_ = 0;
}

SynthesizeRequest::~SynthesizeRequest() {
  // @@protoc_insertion_point(destructor:techmo.tribune.SynthesizeRequest)
  SharedDtor();
}

void SynthesizeRequest::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void SynthesizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynthesizeRequest::descriptor() {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SynthesizeRequest& SynthesizeRequest::default_instance() {
  protobuf_tribune_5ftts_2eproto::InitDefaults();
  return *internal_default_instance();
}

SynthesizeRequest* SynthesizeRequest::New(::google::protobuf::Arena* arena) const {
  SynthesizeRequest* n = new SynthesizeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SynthesizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.SynthesizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  _internal_metadata_.Clear();
}

bool SynthesizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.SynthesizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.tribune.SynthesizeRequest.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.SynthesizeConfig config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.SynthesizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.SynthesizeRequest)
  return false;
#undef DO_
}

void SynthesizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.SynthesizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.SynthesizeRequest.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // .techmo.tribune.SynthesizeConfig config = 2;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.SynthesizeRequest)
}

::google::protobuf::uint8* SynthesizeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.SynthesizeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.SynthesizeRequest.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // .techmo.tribune.SynthesizeConfig config = 2;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.SynthesizeRequest)
  return target;
}

size_t SynthesizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.SynthesizeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .techmo.tribune.SynthesizeConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynthesizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.SynthesizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SynthesizeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.SynthesizeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.SynthesizeRequest)
    MergeFrom(*source);
  }
}

void SynthesizeRequest::MergeFrom(const SynthesizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.SynthesizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_config()) {
    mutable_config()->::techmo::tribune::SynthesizeConfig::MergeFrom(from.config());
  }
}

void SynthesizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.SynthesizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeRequest::CopyFrom(const SynthesizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.SynthesizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeRequest::IsInitialized() const {
  return true;
}

void SynthesizeRequest::Swap(SynthesizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynthesizeRequest::InternalSwap(SynthesizeRequest* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(config_, other->config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SynthesizeRequest::GetMetadata() const {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SynthesizeRequest

// string text = 1;
void SynthesizeRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SynthesizeRequest::text() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeRequest.text)
  return text_.GetNoArena();
}
void SynthesizeRequest::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.tribune.SynthesizeRequest.text)
}
#if LANG_CXX11
void SynthesizeRequest::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tribune.SynthesizeRequest.text)
}
#endif
void SynthesizeRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tribune.SynthesizeRequest.text)
}
void SynthesizeRequest::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tribune.SynthesizeRequest.text)
}
::std::string* SynthesizeRequest::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:techmo.tribune.SynthesizeRequest.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SynthesizeRequest::release_text() {
  // @@protoc_insertion_point(field_release:techmo.tribune.SynthesizeRequest.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SynthesizeRequest::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.SynthesizeRequest.text)
}

// .techmo.tribune.SynthesizeConfig config = 2;
bool SynthesizeRequest::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void SynthesizeRequest::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::techmo::tribune::SynthesizeConfig& SynthesizeRequest::config() const {
  const ::techmo::tribune::SynthesizeConfig* p = config_;
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeRequest.config)
  return p != NULL ? *p : *reinterpret_cast<const ::techmo::tribune::SynthesizeConfig*>(
      &::techmo::tribune::_SynthesizeConfig_default_instance_);
}
::techmo::tribune::SynthesizeConfig* SynthesizeRequest::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::techmo::tribune::SynthesizeConfig;
  }
  // @@protoc_insertion_point(field_mutable:techmo.tribune.SynthesizeRequest.config)
  return config_;
}
::techmo::tribune::SynthesizeConfig* SynthesizeRequest::release_config() {
  // @@protoc_insertion_point(field_release:techmo.tribune.SynthesizeRequest.config)
  
  ::techmo::tribune::SynthesizeConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void SynthesizeRequest::set_allocated_config(::techmo::tribune::SynthesizeConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.SynthesizeRequest.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesizeConfig::kSampleRateHertzFieldNumber;
const int SynthesizeConfig::kEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesizeConfig::SynthesizeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tribune_5ftts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.SynthesizeConfig)
}
SynthesizeConfig::SynthesizeConfig(const SynthesizeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sample_rate_hertz_, &from.sample_rate_hertz_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.SynthesizeConfig)
}

void SynthesizeConfig::SharedCtor() {
  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(encoding_));
  _cached_size_ = 0;
}

SynthesizeConfig::~SynthesizeConfig() {
  // @@protoc_insertion_point(destructor:techmo.tribune.SynthesizeConfig)
  SharedDtor();
}

void SynthesizeConfig::SharedDtor() {
}

void SynthesizeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynthesizeConfig::descriptor() {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SynthesizeConfig& SynthesizeConfig::default_instance() {
  protobuf_tribune_5ftts_2eproto::InitDefaults();
  return *internal_default_instance();
}

SynthesizeConfig* SynthesizeConfig::New(::google::protobuf::Arena* arena) const {
  SynthesizeConfig* n = new SynthesizeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SynthesizeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.SynthesizeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(encoding_));
  _internal_metadata_.Clear();
}

bool SynthesizeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.SynthesizeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sample_rate_hertz = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.AudioEncoding encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::techmo::tribune::AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.SynthesizeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.SynthesizeConfig)
  return false;
#undef DO_
}

void SynthesizeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.SynthesizeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sample_rate_hertz(), output);
  }

  // .techmo.tribune.AudioEncoding encoding = 2;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.SynthesizeConfig)
}

::google::protobuf::uint8* SynthesizeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.SynthesizeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sample_rate_hertz(), target);
  }

  // .techmo.tribune.AudioEncoding encoding = 2;
  if (this->encoding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.SynthesizeConfig)
  return target;
}

size_t SynthesizeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.SynthesizeConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // .techmo.tribune.AudioEncoding encoding = 2;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynthesizeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.SynthesizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SynthesizeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.SynthesizeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.SynthesizeConfig)
    MergeFrom(*source);
  }
}

void SynthesizeConfig::MergeFrom(const SynthesizeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.SynthesizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void SynthesizeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.SynthesizeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeConfig::CopyFrom(const SynthesizeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.SynthesizeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeConfig::IsInitialized() const {
  return true;
}

void SynthesizeConfig::Swap(SynthesizeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynthesizeConfig::InternalSwap(SynthesizeConfig* other) {
  using std::swap;
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(encoding_, other->encoding_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SynthesizeConfig::GetMetadata() const {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SynthesizeConfig

// int32 sample_rate_hertz = 1;
void SynthesizeConfig::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
::google::protobuf::int32 SynthesizeConfig::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeConfig.sample_rate_hertz)
  return sample_rate_hertz_;
}
void SynthesizeConfig::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.SynthesizeConfig.sample_rate_hertz)
}

// .techmo.tribune.AudioEncoding encoding = 2;
void SynthesizeConfig::clear_encoding() {
  encoding_ = 0;
}
::techmo::tribune::AudioEncoding SynthesizeConfig::encoding() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeConfig.encoding)
  return static_cast< ::techmo::tribune::AudioEncoding >(encoding_);
}
void SynthesizeConfig::set_encoding(::techmo::tribune::AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.SynthesizeConfig.encoding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesizeResponse::kAudioFieldNumber;
const int SynthesizeResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesizeResponse::SynthesizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tribune_5ftts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.SynthesizeResponse)
}
SynthesizeResponse::SynthesizeResponse(const SynthesizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio()) {
    audio_ = new ::techmo::tribune::AudioData(*from.audio_);
  } else {
    audio_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::techmo::tribune::Error(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.SynthesizeResponse)
}

void SynthesizeResponse::SharedCtor() {
  ::memset(&audio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(error_));
  _cached_size_ = 0;
}

SynthesizeResponse::~SynthesizeResponse() {
  // @@protoc_insertion_point(destructor:techmo.tribune.SynthesizeResponse)
  SharedDtor();
}

void SynthesizeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete audio_;
  if (this != internal_default_instance()) delete error_;
}

void SynthesizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynthesizeResponse::descriptor() {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SynthesizeResponse& SynthesizeResponse::default_instance() {
  protobuf_tribune_5ftts_2eproto::InitDefaults();
  return *internal_default_instance();
}

SynthesizeResponse* SynthesizeResponse::New(::google::protobuf::Arena* arena) const {
  SynthesizeResponse* n = new SynthesizeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SynthesizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.SynthesizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && audio_ != NULL) {
    delete audio_;
  }
  audio_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) {
    delete error_;
  }
  error_ = NULL;
  _internal_metadata_.Clear();
}

bool SynthesizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.SynthesizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.tribune.AudioData audio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.SynthesizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.SynthesizeResponse)
  return false;
#undef DO_
}

void SynthesizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.SynthesizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tribune.AudioData audio = 1;
  if (this->has_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->audio_, output);
  }

  // .techmo.tribune.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.SynthesizeResponse)
}

::google::protobuf::uint8* SynthesizeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.SynthesizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tribune.AudioData audio = 1;
  if (this->has_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->audio_, deterministic, target);
  }

  // .techmo.tribune.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.SynthesizeResponse)
  return target;
}

size_t SynthesizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.SynthesizeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .techmo.tribune.AudioData audio = 1;
  if (this->has_audio()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_);
  }

  // .techmo.tribune.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynthesizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.SynthesizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SynthesizeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.SynthesizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.SynthesizeResponse)
    MergeFrom(*source);
  }
}

void SynthesizeResponse::MergeFrom(const SynthesizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.SynthesizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_audio()) {
    mutable_audio()->::techmo::tribune::AudioData::MergeFrom(from.audio());
  }
  if (from.has_error()) {
    mutable_error()->::techmo::tribune::Error::MergeFrom(from.error());
  }
}

void SynthesizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.SynthesizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeResponse::CopyFrom(const SynthesizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.SynthesizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeResponse::IsInitialized() const {
  return true;
}

void SynthesizeResponse::Swap(SynthesizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynthesizeResponse::InternalSwap(SynthesizeResponse* other) {
  using std::swap;
  swap(audio_, other->audio_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SynthesizeResponse::GetMetadata() const {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SynthesizeResponse

// .techmo.tribune.AudioData audio = 1;
bool SynthesizeResponse::has_audio() const {
  return this != internal_default_instance() && audio_ != NULL;
}
void SynthesizeResponse::clear_audio() {
  if (GetArenaNoVirtual() == NULL && audio_ != NULL) delete audio_;
  audio_ = NULL;
}
const ::techmo::tribune::AudioData& SynthesizeResponse::audio() const {
  const ::techmo::tribune::AudioData* p = audio_;
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeResponse.audio)
  return p != NULL ? *p : *reinterpret_cast<const ::techmo::tribune::AudioData*>(
      &::techmo::tribune::_AudioData_default_instance_);
}
::techmo::tribune::AudioData* SynthesizeResponse::mutable_audio() {
  
  if (audio_ == NULL) {
    audio_ = new ::techmo::tribune::AudioData;
  }
  // @@protoc_insertion_point(field_mutable:techmo.tribune.SynthesizeResponse.audio)
  return audio_;
}
::techmo::tribune::AudioData* SynthesizeResponse::release_audio() {
  // @@protoc_insertion_point(field_release:techmo.tribune.SynthesizeResponse.audio)
  
  ::techmo::tribune::AudioData* temp = audio_;
  audio_ = NULL;
  return temp;
}
void SynthesizeResponse::set_allocated_audio(::techmo::tribune::AudioData* audio) {
  delete audio_;
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.SynthesizeResponse.audio)
}

// .techmo.tribune.Error error = 2;
bool SynthesizeResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void SynthesizeResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::techmo::tribune::Error& SynthesizeResponse::error() const {
  const ::techmo::tribune::Error* p = error_;
  // @@protoc_insertion_point(field_get:techmo.tribune.SynthesizeResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::techmo::tribune::Error*>(
      &::techmo::tribune::_Error_default_instance_);
}
::techmo::tribune::Error* SynthesizeResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::techmo::tribune::Error;
  }
  // @@protoc_insertion_point(field_mutable:techmo.tribune.SynthesizeResponse.error)
  return error_;
}
::techmo::tribune::Error* SynthesizeResponse::release_error() {
  // @@protoc_insertion_point(field_release:techmo.tribune.SynthesizeResponse.error)
  
  ::techmo::tribune::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void SynthesizeResponse::set_allocated_error(::techmo::tribune::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.SynthesizeResponse.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioData::kSampleRateHertzFieldNumber;
const int AudioData::kContentFieldNumber;
const int AudioData::kEndOfStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioData::AudioData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tribune_5ftts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.AudioData)
}
AudioData::AudioData(const AudioData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&sample_rate_hertz_, &from.sample_rate_hertz_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_of_stream_) -
    reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(end_of_stream_));
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.AudioData)
}

void AudioData::SharedCtor() {
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_stream_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(end_of_stream_));
  _cached_size_ = 0;
}

AudioData::~AudioData() {
  // @@protoc_insertion_point(destructor:techmo.tribune.AudioData)
  SharedDtor();
}

void AudioData::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AudioData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioData::descriptor() {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AudioData& AudioData::default_instance() {
  protobuf_tribune_5ftts_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioData* AudioData::New(::google::protobuf::Arena* arena) const {
  AudioData* n = new AudioData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioData::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.AudioData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_stream_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(end_of_stream_));
  _internal_metadata_.Clear();
}

bool AudioData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.AudioData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sample_rate_hertz = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end_of_stream = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_of_stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.AudioData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.AudioData)
  return false;
#undef DO_
}

void AudioData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.AudioData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sample_rate_hertz(), output);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // bool end_of_stream = 3;
  if (this->end_of_stream() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->end_of_stream(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.AudioData)
}

::google::protobuf::uint8* AudioData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.AudioData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sample_rate_hertz(), target);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // bool end_of_stream = 3;
  if (this->end_of_stream() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->end_of_stream(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.AudioData)
  return target;
}

size_t AudioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.AudioData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // bool end_of_stream = 3;
  if (this->end_of_stream() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AudioData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.AudioData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.AudioData)
    MergeFrom(*source);
  }
}

void AudioData::MergeFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.end_of_stream() != 0) {
    set_end_of_stream(from.end_of_stream());
  }
}

void AudioData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioData::CopyFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioData::IsInitialized() const {
  return true;
}

void AudioData::Swap(AudioData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioData::InternalSwap(AudioData* other) {
  using std::swap;
  content_.Swap(&other->content_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(end_of_stream_, other->end_of_stream_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AudioData::GetMetadata() const {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioData

// int32 sample_rate_hertz = 1;
void AudioData::clear_sample_rate_hertz() {
  sample_rate_hertz_ = 0;
}
::google::protobuf::int32 AudioData::sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.AudioData.sample_rate_hertz)
  return sample_rate_hertz_;
}
void AudioData::set_sample_rate_hertz(::google::protobuf::int32 value) {
  
  sample_rate_hertz_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.AudioData.sample_rate_hertz)
}

// bytes content = 2;
void AudioData::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AudioData::content() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.AudioData.content)
  return content_.GetNoArena();
}
void AudioData::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.tribune.AudioData.content)
}
#if LANG_CXX11
void AudioData::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tribune.AudioData.content)
}
#endif
void AudioData::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tribune.AudioData.content)
}
void AudioData::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tribune.AudioData.content)
}
::std::string* AudioData::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:techmo.tribune.AudioData.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AudioData::release_content() {
  // @@protoc_insertion_point(field_release:techmo.tribune.AudioData.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AudioData::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.AudioData.content)
}

// bool end_of_stream = 3;
void AudioData::clear_end_of_stream() {
  end_of_stream_ = false;
}
bool AudioData::end_of_stream() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.AudioData.end_of_stream)
  return end_of_stream_;
}
void AudioData::set_end_of_stream(bool value) {
  
  end_of_stream_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.AudioData.end_of_stream)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tribune_5ftts_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.Error)
}

void Error::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:techmo.tribune.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_tribune_5ftts_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.tribune.ErrorCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::techmo::tribune::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "techmo.tribune.Error.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tribune.ErrorCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.Error.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tribune.ErrorCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.Error.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.Error)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .techmo.tribune.ErrorCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  description_.Swap(&other->description_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_tribune_5ftts_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tribune_5ftts_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// .techmo.tribune.ErrorCode code = 1;
void Error::clear_code() {
  code_ = 0;
}
::techmo::tribune::ErrorCode Error::code() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.Error.code)
  return static_cast< ::techmo::tribune::ErrorCode >(code_);
}
void Error::set_code(::techmo::tribune::ErrorCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:techmo.tribune.Error.code)
}

// string description = 2;
void Error::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::description() const {
  // @@protoc_insertion_point(field_get:techmo.tribune.Error.description)
  return description_.GetNoArena();
}
void Error::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:techmo.tribune.Error.description)
}
#if LANG_CXX11
void Error::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:techmo.tribune.Error.description)
}
#endif
void Error::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:techmo.tribune.Error.description)
}
void Error::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:techmo.tribune.Error.description)
}
::std::string* Error::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:techmo.tribune.Error.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_description() {
  // @@protoc_insertion_point(field_release:techmo.tribune.Error.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:techmo.tribune.Error.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tribune
}  // namespace techmo

// @@protoc_insertion_point(global_scope)
