// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tribune_tts.proto

#include "tribune_tts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tribune_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioData_tribune_5ftts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tribune_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_tribune_5ftts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tribune_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SynthesizeConfig_tribune_5ftts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tribune_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_tribune_5ftts_2eproto;
namespace techmo {
namespace tribune {
class SynthesizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SynthesizeRequest> _instance;
} _SynthesizeRequest_default_instance_;
class SynthesizeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SynthesizeConfig> _instance;
} _SynthesizeConfig_default_instance_;
class VoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Voice> _instance;
} _Voice_default_instance_;
class SynthesizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SynthesizeResponse> _instance;
} _SynthesizeResponse_default_instance_;
class AudioDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioData> _instance;
} _AudioData_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
}  // namespace tribune
}  // namespace techmo
static void InitDefaultsscc_info_AudioData_tribune_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tribune::_AudioData_default_instance_;
    new (ptr) ::techmo::tribune::AudioData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tribune::AudioData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioData_tribune_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AudioData_tribune_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_Error_tribune_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tribune::_Error_default_instance_;
    new (ptr) ::techmo::tribune::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tribune::Error::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_tribune_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Error_tribune_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_SynthesizeConfig_tribune_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tribune::_SynthesizeConfig_default_instance_;
    new (ptr) ::techmo::tribune::SynthesizeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tribune::SynthesizeConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SynthesizeConfig_tribune_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SynthesizeConfig_tribune_5ftts_2eproto}, {
      &scc_info_Voice_tribune_5ftts_2eproto.base,}};

static void InitDefaultsscc_info_SynthesizeRequest_tribune_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tribune::_SynthesizeRequest_default_instance_;
    new (ptr) ::techmo::tribune::SynthesizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tribune::SynthesizeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SynthesizeRequest_tribune_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SynthesizeRequest_tribune_5ftts_2eproto}, {
      &scc_info_SynthesizeConfig_tribune_5ftts_2eproto.base,}};

static void InitDefaultsscc_info_SynthesizeResponse_tribune_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tribune::_SynthesizeResponse_default_instance_;
    new (ptr) ::techmo::tribune::SynthesizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tribune::SynthesizeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SynthesizeResponse_tribune_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SynthesizeResponse_tribune_5ftts_2eproto}, {
      &scc_info_AudioData_tribune_5ftts_2eproto.base,
      &scc_info_Error_tribune_5ftts_2eproto.base,}};

static void InitDefaultsscc_info_Voice_tribune_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tribune::_Voice_default_instance_;
    new (ptr) ::techmo::tribune::Voice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tribune::Voice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_tribune_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Voice_tribune_5ftts_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tribune_5ftts_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tribune_5ftts_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tribune_5ftts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tribune_5ftts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeRequest, text_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeConfig, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeConfig, output_format_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeConfig, language_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeConfig, voice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::Voice, name_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::Voice, gender_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::Voice, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeResponse, audio_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::SynthesizeResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::AudioData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::AudioData, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::AudioData, content_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::AudioData, end_of_stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::Error, code_),
  PROTOBUF_FIELD_OFFSET(::techmo::tribune::Error, description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::techmo::tribune::SynthesizeRequest)},
  { 7, -1, sizeof(::techmo::tribune::SynthesizeConfig)},
  { 16, -1, sizeof(::techmo::tribune::Voice)},
  { 24, -1, sizeof(::techmo::tribune::SynthesizeResponse)},
  { 31, -1, sizeof(::techmo::tribune::AudioData)},
  { 39, -1, sizeof(::techmo::tribune::Error)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tribune::_SynthesizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tribune::_SynthesizeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tribune::_Voice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tribune::_SynthesizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tribune::_AudioData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tribune::_Error_default_instance_),
};

const char descriptor_table_protodef_tribune_5ftts_2eproto[] =
  "\n\021tribune_tts.proto\022\016techmo.tribune\"S\n\021S"
  "ynthesizeRequest\022\014\n\004text\030\001 \001(\t\0220\n\006config"
  "\030\002 \001(\0132 .techmo.tribune.SynthesizeConfig"
  "\"\232\001\n\020SynthesizeConfig\022\031\n\021sample_rate_her"
  "tz\030\001 \001(\005\0223\n\routput_format\030\002 \001(\0162\034.techmo"
  ".tribune.OutputFormat\022\020\n\010language\030\003 \001(\t\022"
  "$\n\005voice\030\004 \001(\0132\025.techmo.tribune.Voice\"_\n"
  "\005Voice\022\014\n\004name\030\001 \001(\t\022&\n\006gender\030\002 \001(\0162\026.t"
  "echmo.tribune.Gender\022 \n\003age\030\003 \001(\0162\023.tech"
  "mo.tribune.Age\"d\n\022SynthesizeResponse\022(\n\005"
  "audio\030\001 \001(\0132\031.techmo.tribune.AudioData\022$"
  "\n\005error\030\002 \001(\0132\025.techmo.tribune.Error\"N\n\t"
  "AudioData\022\031\n\021sample_rate_hertz\030\001 \001(\005\022\017\n\007"
  "content\030\002 \001(\014\022\025\n\rend_of_stream\030\003 \001(\010\"E\n\005"
  "Error\022\'\n\004code\030\001 \001(\0162\031.techmo.tribune.Err"
  "orCode\022\023\n\013description\030\002 \001(\t*)\n\014OutputFor"
  "mat\022\t\n\005PCM16\020\000\022\016\n\nOGG_VORBIS\020\001*$\n\003Age\022\t\n"
  "\005ADULT\020\000\022\t\n\005CHILD\020\001\022\007\n\003OLD\020\002*\036\n\006Gender\022\n"
  "\n\006FEMALE\020\000\022\010\n\004MALE\020\001*_\n\tErrorCode\022\013\n\007UNK"
  "NOWN\020\000\022\013\n\007LICENCE\020\001\022\026\n\022TEXT_NORMALIZATIO"
  "N\020\002\022\021\n\rTRANSCRIPTION\020\003\022\r\n\tSYNTHESIS\020\0042\\\n"
  "\003TTS\022U\n\nSynthesize\022!.techmo.tribune.Synt"
  "hesizeRequest\032\".techmo.tribune.Synthesiz"
  "eResponse0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tribune_5ftts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tribune_5ftts_2eproto_sccs[6] = {
  &scc_info_AudioData_tribune_5ftts_2eproto.base,
  &scc_info_Error_tribune_5ftts_2eproto.base,
  &scc_info_SynthesizeConfig_tribune_5ftts_2eproto.base,
  &scc_info_SynthesizeRequest_tribune_5ftts_2eproto.base,
  &scc_info_SynthesizeResponse_tribune_5ftts_2eproto.base,
  &scc_info_Voice_tribune_5ftts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tribune_5ftts_2eproto_once;
static bool descriptor_table_tribune_5ftts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tribune_5ftts_2eproto = {
  &descriptor_table_tribune_5ftts_2eproto_initialized, descriptor_table_protodef_tribune_5ftts_2eproto, "tribune_tts.proto", 939,
  &descriptor_table_tribune_5ftts_2eproto_once, descriptor_table_tribune_5ftts_2eproto_sccs, descriptor_table_tribune_5ftts_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_tribune_5ftts_2eproto::offsets,
  file_level_metadata_tribune_5ftts_2eproto, 6, file_level_enum_descriptors_tribune_5ftts_2eproto, file_level_service_descriptors_tribune_5ftts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tribune_5ftts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tribune_5ftts_2eproto), true);
namespace techmo {
namespace tribune {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tribune_5ftts_2eproto);
  return file_level_enum_descriptors_tribune_5ftts_2eproto[0];
}
bool OutputFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Age_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tribune_5ftts_2eproto);
  return file_level_enum_descriptors_tribune_5ftts_2eproto[1];
}
bool Age_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tribune_5ftts_2eproto);
  return file_level_enum_descriptors_tribune_5ftts_2eproto[2];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tribune_5ftts_2eproto);
  return file_level_enum_descriptors_tribune_5ftts_2eproto[3];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SynthesizeRequest::InitAsDefaultInstance() {
  ::techmo::tribune::_SynthesizeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::techmo::tribune::SynthesizeConfig*>(
      ::techmo::tribune::SynthesizeConfig::internal_default_instance());
}
class SynthesizeRequest::HasBitSetters {
 public:
  static const ::techmo::tribune::SynthesizeConfig& config(const SynthesizeRequest* msg);
};

const ::techmo::tribune::SynthesizeConfig&
SynthesizeRequest::HasBitSetters::config(const SynthesizeRequest* msg) {
  return *msg->config_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesizeRequest::kTextFieldNumber;
const int SynthesizeRequest::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesizeRequest::SynthesizeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.SynthesizeRequest)
}
SynthesizeRequest::SynthesizeRequest(const SynthesizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_config()) {
    config_ = new ::techmo::tribune::SynthesizeConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.SynthesizeRequest)
}

void SynthesizeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SynthesizeRequest_tribune_5ftts_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_ = nullptr;
}

SynthesizeRequest::~SynthesizeRequest() {
  // @@protoc_insertion_point(destructor:techmo.tribune.SynthesizeRequest)
  SharedDtor();
}

void SynthesizeRequest::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void SynthesizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SynthesizeRequest& SynthesizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SynthesizeRequest_tribune_5ftts_2eproto.base);
  return *internal_default_instance();
}


void SynthesizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.SynthesizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SynthesizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "techmo.tribune.SynthesizeRequest.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tribune.SynthesizeConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SynthesizeRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.SynthesizeRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.tribune.SynthesizeRequest.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.SynthesizeConfig config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.SynthesizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.SynthesizeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SynthesizeRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.SynthesizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.SynthesizeRequest.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // .techmo.tribune.SynthesizeConfig config = 2;
  if (this->has_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::config(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.SynthesizeRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* SynthesizeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.SynthesizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.SynthesizeRequest.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // .techmo.tribune.SynthesizeConfig config = 2;
  if (this->has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::config(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.SynthesizeRequest)
  return target;
}

size_t SynthesizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.SynthesizeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  // .techmo.tribune.SynthesizeConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.SynthesizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SynthesizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.SynthesizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.SynthesizeRequest)
    MergeFrom(*source);
  }
}

void SynthesizeRequest::MergeFrom(const SynthesizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.SynthesizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_config()) {
    mutable_config()->::techmo::tribune::SynthesizeConfig::MergeFrom(from.config());
  }
}

void SynthesizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.SynthesizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeRequest::CopyFrom(const SynthesizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.SynthesizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeRequest::IsInitialized() const {
  return true;
}

void SynthesizeRequest::Swap(SynthesizeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynthesizeRequest::InternalSwap(SynthesizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SynthesizeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SynthesizeConfig::InitAsDefaultInstance() {
  ::techmo::tribune::_SynthesizeConfig_default_instance_._instance.get_mutable()->voice_ = const_cast< ::techmo::tribune::Voice*>(
      ::techmo::tribune::Voice::internal_default_instance());
}
class SynthesizeConfig::HasBitSetters {
 public:
  static const ::techmo::tribune::Voice& voice(const SynthesizeConfig* msg);
};

const ::techmo::tribune::Voice&
SynthesizeConfig::HasBitSetters::voice(const SynthesizeConfig* msg) {
  return *msg->voice_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesizeConfig::kSampleRateHertzFieldNumber;
const int SynthesizeConfig::kOutputFormatFieldNumber;
const int SynthesizeConfig::kLanguageFieldNumber;
const int SynthesizeConfig::kVoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesizeConfig::SynthesizeConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.SynthesizeConfig)
}
SynthesizeConfig::SynthesizeConfig(const SynthesizeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.language().size() > 0) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_voice()) {
    voice_ = new ::techmo::tribune::Voice(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  ::memcpy(&sample_rate_hertz_, &from.sample_rate_hertz_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_format_) -
    reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(output_format_));
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.SynthesizeConfig)
}

void SynthesizeConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SynthesizeConfig_tribune_5ftts_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&voice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_format_) -
      reinterpret_cast<char*>(&voice_)) + sizeof(output_format_));
}

SynthesizeConfig::~SynthesizeConfig() {
  // @@protoc_insertion_point(destructor:techmo.tribune.SynthesizeConfig)
  SharedDtor();
}

void SynthesizeConfig::SharedDtor() {
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete voice_;
}

void SynthesizeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SynthesizeConfig& SynthesizeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SynthesizeConfig_tribune_5ftts_2eproto.base);
  return *internal_default_instance();
}


void SynthesizeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.SynthesizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && voice_ != nullptr) {
    delete voice_;
  }
  voice_ = nullptr;
  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_format_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(output_format_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SynthesizeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sample_rate_hertz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tribune.OutputFormat output_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_output_format(static_cast<::techmo::tribune::OutputFormat>(val));
        } else goto handle_unusual;
        continue;
      // string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_language(), ptr, ctx, "techmo.tribune.SynthesizeConfig.language");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tribune.Voice voice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SynthesizeConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.SynthesizeConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sample_rate_hertz = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.OutputFormat output_format = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_output_format(static_cast< ::techmo::tribune::OutputFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->language().data(), static_cast<int>(this->language().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.tribune.SynthesizeConfig.language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.Voice voice = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.SynthesizeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.SynthesizeConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SynthesizeConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.SynthesizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->sample_rate_hertz(), output);
  }

  // .techmo.tribune.OutputFormat output_format = 2;
  if (this->output_format() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->output_format(), output);
  }

  // string language = 3;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.SynthesizeConfig.language");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->language(), output);
  }

  // .techmo.tribune.Voice voice = 4;
  if (this->has_voice()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::voice(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.SynthesizeConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* SynthesizeConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.SynthesizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->sample_rate_hertz(), target);
  }

  // .techmo.tribune.OutputFormat output_format = 2;
  if (this->output_format() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->output_format(), target);
  }

  // string language = 3;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language().data(), static_cast<int>(this->language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.SynthesizeConfig.language");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->language(), target);
  }

  // .techmo.tribune.Voice voice = 4;
  if (this->has_voice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::voice(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.SynthesizeConfig)
  return target;
}

size_t SynthesizeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.SynthesizeConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language = 3;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->language());
  }

  // .techmo.tribune.Voice voice = 4;
  if (this->has_voice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voice_);
  }

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // .techmo.tribune.OutputFormat output_format = 2;
  if (this->output_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->output_format());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesizeConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.SynthesizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SynthesizeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.SynthesizeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.SynthesizeConfig)
    MergeFrom(*source);
  }
}

void SynthesizeConfig::MergeFrom(const SynthesizeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.SynthesizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_voice()) {
    mutable_voice()->::techmo::tribune::Voice::MergeFrom(from.voice());
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.output_format() != 0) {
    set_output_format(from.output_format());
  }
}

void SynthesizeConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.SynthesizeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeConfig::CopyFrom(const SynthesizeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.SynthesizeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeConfig::IsInitialized() const {
  return true;
}

void SynthesizeConfig::Swap(SynthesizeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynthesizeConfig::InternalSwap(SynthesizeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(voice_, other->voice_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(output_format_, other->output_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SynthesizeConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Voice::InitAsDefaultInstance() {
}
class Voice::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Voice::kNameFieldNumber;
const int Voice::kGenderFieldNumber;
const int Voice::kAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Voice::Voice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.Voice)
}
Voice::Voice(const Voice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.Voice)
}

void Voice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Voice_tribune_5ftts_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(age_));
}

Voice::~Voice() {
  // @@protoc_insertion_point(destructor:techmo.tribune.Voice)
  SharedDtor();
}

void Voice::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Voice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Voice& Voice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Voice_tribune_5ftts_2eproto.base);
  return *internal_default_instance();
}


void Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Voice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "techmo.tribune.Voice.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tribune.Gender gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gender(static_cast<::techmo::tribune::Gender>(val));
        } else goto handle_unusual;
        continue;
      // .techmo.tribune.Age age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_age(static_cast<::techmo::tribune::Age>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Voice::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.Voice)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.tribune.Voice.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.Gender gender = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gender(static_cast< ::techmo::tribune::Gender >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.Age age = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_age(static_cast< ::techmo::tribune::Age >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.Voice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Voice::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.Voice.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .techmo.tribune.Gender gender = 2;
  if (this->gender() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->gender(), output);
  }

  // .techmo.tribune.Age age = 3;
  if (this->age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.Voice)
}

::PROTOBUF_NAMESPACE_ID::uint8* Voice::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.Voice.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .techmo.tribune.Gender gender = 2;
  if (this->gender() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->gender(), target);
  }

  // .techmo.tribune.Age age = 3;
  if (this->age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.Voice)
  return target;
}

size_t Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.Voice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .techmo.tribune.Gender gender = 2;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gender());
  }

  // .techmo.tribune.Age age = 3;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->age());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Voice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  const Voice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Voice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.Voice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.Voice)
    MergeFrom(*source);
  }
}

void Voice::MergeFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void Voice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voice::CopyFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voice::IsInitialized() const {
  return true;
}

void Voice::Swap(Voice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Voice::InternalSwap(Voice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gender_, other->gender_);
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Voice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SynthesizeResponse::InitAsDefaultInstance() {
  ::techmo::tribune::_SynthesizeResponse_default_instance_._instance.get_mutable()->audio_ = const_cast< ::techmo::tribune::AudioData*>(
      ::techmo::tribune::AudioData::internal_default_instance());
  ::techmo::tribune::_SynthesizeResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::techmo::tribune::Error*>(
      ::techmo::tribune::Error::internal_default_instance());
}
class SynthesizeResponse::HasBitSetters {
 public:
  static const ::techmo::tribune::AudioData& audio(const SynthesizeResponse* msg);
  static const ::techmo::tribune::Error& error(const SynthesizeResponse* msg);
};

const ::techmo::tribune::AudioData&
SynthesizeResponse::HasBitSetters::audio(const SynthesizeResponse* msg) {
  return *msg->audio_;
}
const ::techmo::tribune::Error&
SynthesizeResponse::HasBitSetters::error(const SynthesizeResponse* msg) {
  return *msg->error_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SynthesizeResponse::kAudioFieldNumber;
const int SynthesizeResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SynthesizeResponse::SynthesizeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.SynthesizeResponse)
}
SynthesizeResponse::SynthesizeResponse(const SynthesizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio()) {
    audio_ = new ::techmo::tribune::AudioData(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  if (from.has_error()) {
    error_ = new ::techmo::tribune::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.SynthesizeResponse)
}

void SynthesizeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SynthesizeResponse_tribune_5ftts_2eproto.base);
  ::memset(&audio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(error_));
}

SynthesizeResponse::~SynthesizeResponse() {
  // @@protoc_insertion_point(destructor:techmo.tribune.SynthesizeResponse)
  SharedDtor();
}

void SynthesizeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete audio_;
  if (this != internal_default_instance()) delete error_;
}

void SynthesizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SynthesizeResponse& SynthesizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SynthesizeResponse_tribune_5ftts_2eproto.base);
  return *internal_default_instance();
}


void SynthesizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.SynthesizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SynthesizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .techmo.tribune.AudioData audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tribune.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SynthesizeResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.SynthesizeResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.tribune.AudioData audio = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .techmo.tribune.Error error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.SynthesizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.SynthesizeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SynthesizeResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.SynthesizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tribune.AudioData audio = 1;
  if (this->has_audio()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::audio(this), output);
  }

  // .techmo.tribune.Error error = 2;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.SynthesizeResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* SynthesizeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.SynthesizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tribune.AudioData audio = 1;
  if (this->has_audio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::audio(this), target);
  }

  // .techmo.tribune.Error error = 2;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.SynthesizeResponse)
  return target;
}

size_t SynthesizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.SynthesizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .techmo.tribune.AudioData audio = 1;
  if (this->has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  // .techmo.tribune.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.SynthesizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SynthesizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.SynthesizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.SynthesizeResponse)
    MergeFrom(*source);
  }
}

void SynthesizeResponse::MergeFrom(const SynthesizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.SynthesizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_audio()) {
    mutable_audio()->::techmo::tribune::AudioData::MergeFrom(from.audio());
  }
  if (from.has_error()) {
    mutable_error()->::techmo::tribune::Error::MergeFrom(from.error());
  }
}

void SynthesizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.SynthesizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeResponse::CopyFrom(const SynthesizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.SynthesizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeResponse::IsInitialized() const {
  return true;
}

void SynthesizeResponse::Swap(SynthesizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SynthesizeResponse::InternalSwap(SynthesizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(audio_, other->audio_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SynthesizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioData::InitAsDefaultInstance() {
}
class AudioData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioData::kSampleRateHertzFieldNumber;
const int AudioData::kContentFieldNumber;
const int AudioData::kEndOfStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioData::AudioData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.AudioData)
}
AudioData::AudioData(const AudioData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  ::memcpy(&sample_rate_hertz_, &from.sample_rate_hertz_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_of_stream_) -
    reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(end_of_stream_));
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.AudioData)
}

void AudioData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioData_tribune_5ftts_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_stream_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(end_of_stream_));
}

AudioData::~AudioData() {
  // @@protoc_insertion_point(destructor:techmo.tribune.AudioData)
  SharedDtor();
}

void AudioData::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioData& AudioData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioData_tribune_5ftts_2eproto.base);
  return *internal_default_instance();
}


void AudioData::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.AudioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_hertz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_of_stream_) -
      reinterpret_cast<char*>(&sample_rate_hertz_)) + sizeof(end_of_stream_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sample_rate_hertz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_content(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool end_of_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_of_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.AudioData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sample_rate_hertz = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_rate_hertz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end_of_stream = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_of_stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.AudioData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.AudioData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.AudioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->sample_rate_hertz(), output);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // bool end_of_stream = 3;
  if (this->end_of_stream() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->end_of_stream(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.AudioData)
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.AudioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->sample_rate_hertz(), target);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // bool end_of_stream = 3;
  if (this->end_of_stream() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->end_of_stream(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.AudioData)
  return target;
}

size_t AudioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.AudioData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sample_rate_hertz());
  }

  // bool end_of_stream = 3;
  if (this->end_of_stream() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.AudioData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.AudioData)
    MergeFrom(*source);
  }
}

void AudioData::MergeFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.sample_rate_hertz() != 0) {
    set_sample_rate_hertz(from.sample_rate_hertz());
  }
  if (from.end_of_stream() != 0) {
    set_end_of_stream(from.end_of_stream());
  }
}

void AudioData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioData::CopyFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioData::IsInitialized() const {
  return true;
}

void AudioData::Swap(AudioData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioData::InternalSwap(AudioData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(end_of_stream_, other->end_of_stream_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
class Error::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tribune.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:techmo.tribune.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_tribune_5ftts_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:techmo.tribune.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_tribune_5ftts_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tribune.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .techmo.tribune.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_code(static_cast<::techmo::tribune::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_description(), ptr, ctx, "techmo.tribune.Error.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Error::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:techmo.tribune.Error)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .techmo.tribune.ErrorCode code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::techmo::tribune::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "techmo.tribune.Error.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:techmo.tribune.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:techmo.tribune.Error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Error::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:techmo.tribune.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tribune.ErrorCode code = 1;
  if (this->code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.Error.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:techmo.tribune.Error)
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tribune.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tribune.ErrorCode code = 1;
  if (this->code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tribune.Error.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tribune.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tribune.Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .techmo.tribune.ErrorCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tribune.Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tribune.Error)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tribune.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tribune.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tribune.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tribune.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tribune
}  // namespace techmo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::techmo::tribune::SynthesizeRequest* Arena::CreateMaybeMessage< ::techmo::tribune::SynthesizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tribune::SynthesizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tribune::SynthesizeConfig* Arena::CreateMaybeMessage< ::techmo::tribune::SynthesizeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tribune::SynthesizeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tribune::Voice* Arena::CreateMaybeMessage< ::techmo::tribune::Voice >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tribune::Voice >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tribune::SynthesizeResponse* Arena::CreateMaybeMessage< ::techmo::tribune::SynthesizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tribune::SynthesizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tribune::AudioData* Arena::CreateMaybeMessage< ::techmo::tribune::AudioData >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tribune::AudioData >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tribune::Error* Arena::CreateMaybeMessage< ::techmo::tribune::Error >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tribune::Error >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
