// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tribune_tts.proto
// Original file comments:
// Techmo Tribune TTS API  
// version: 2.0.0   
// authors: Dawid Skurzok, Paweł Jaciów, Michał Radziszewski  
// date:    2020-10-05  
#ifndef GRPC_tribune_5ftts_2eproto__INCLUDED
#define GRPC_tribune_5ftts_2eproto__INCLUDED

#include "tribune_tts.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace techmo {
namespace tribune {

// Service that implements Techmo Text-To-Speech (TTS) API.
class TTS final {
 public:
  static constexpr char const* service_full_name() {
    return "techmo.tribune.TTS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all available voices which can be used to synthesize speech.
    virtual ::grpc::Status ListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::techmo::tribune::ListVoicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::ListVoicesResponse>> AsyncListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::ListVoicesResponse>>(AsyncListVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::ListVoicesResponse>> PrepareAsyncListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::ListVoicesResponse>>(PrepareAsyncListVoicesRaw(context, request, cq));
    }
    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (streaming version, one or more response packets) or `error`.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::techmo::tribune::SynthesizeResponse>> SynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::techmo::tribune::SynthesizeResponse>>(SynthesizeStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::techmo::tribune::SynthesizeResponse>> AsyncSynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::techmo::tribune::SynthesizeResponse>>(AsyncSynthesizeStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::techmo::tribune::SynthesizeResponse>> PrepareAsyncSynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::techmo::tribune::SynthesizeResponse>>(PrepareAsyncSynthesizeStreamingRaw(context, request, cq));
    }
    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet) or `error`.
    virtual ::grpc::Status Synthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::techmo::tribune::SynthesizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::SynthesizeResponse>> AsyncSynthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::SynthesizeResponse>>(AsyncSynthesizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::SynthesizeResponse>> PrepareAsyncSynthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::SynthesizeResponse>>(PrepareAsyncSynthesizeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists all available voices which can be used to synthesize speech.
      virtual void ListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest* request, ::techmo::tribune::ListVoicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListVoices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::techmo::tribune::ListVoicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest* request, ::techmo::tribune::ListVoicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListVoices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::techmo::tribune::ListVoicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
      // Returns audio signal with synthesized speech (streaming version, one or more response packets) or `error`.
      virtual void SynthesizeStreaming(::grpc::ClientContext* context, ::techmo::tribune::SynthesizeRequest* request, ::grpc::experimental::ClientReadReactor< ::techmo::tribune::SynthesizeResponse>* reactor) = 0;
      // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
      // Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet) or `error`.
      virtual void Synthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest* request, ::techmo::tribune::SynthesizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Synthesize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::techmo::tribune::SynthesizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Synthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest* request, ::techmo::tribune::SynthesizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Synthesize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::techmo::tribune::SynthesizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::ListVoicesResponse>* AsyncListVoicesRaw(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::ListVoicesResponse>* PrepareAsyncListVoicesRaw(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::techmo::tribune::SynthesizeResponse>* SynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::techmo::tribune::SynthesizeResponse>* AsyncSynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::techmo::tribune::SynthesizeResponse>* PrepareAsyncSynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::SynthesizeResponse>* AsyncSynthesizeRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::techmo::tribune::SynthesizeResponse>* PrepareAsyncSynthesizeRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::techmo::tribune::ListVoicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tribune::ListVoicesResponse>> AsyncListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tribune::ListVoicesResponse>>(AsyncListVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tribune::ListVoicesResponse>> PrepareAsyncListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tribune::ListVoicesResponse>>(PrepareAsyncListVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::techmo::tribune::SynthesizeResponse>> SynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::techmo::tribune::SynthesizeResponse>>(SynthesizeStreamingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::techmo::tribune::SynthesizeResponse>> AsyncSynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::techmo::tribune::SynthesizeResponse>>(AsyncSynthesizeStreamingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::techmo::tribune::SynthesizeResponse>> PrepareAsyncSynthesizeStreaming(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::techmo::tribune::SynthesizeResponse>>(PrepareAsyncSynthesizeStreamingRaw(context, request, cq));
    }
    ::grpc::Status Synthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::techmo::tribune::SynthesizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tribune::SynthesizeResponse>> AsyncSynthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tribune::SynthesizeResponse>>(AsyncSynthesizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tribune::SynthesizeResponse>> PrepareAsyncSynthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::techmo::tribune::SynthesizeResponse>>(PrepareAsyncSynthesizeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest* request, ::techmo::tribune::ListVoicesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListVoices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::techmo::tribune::ListVoicesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListVoices(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest* request, ::techmo::tribune::ListVoicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListVoices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::techmo::tribune::ListVoicesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SynthesizeStreaming(::grpc::ClientContext* context, ::techmo::tribune::SynthesizeRequest* request, ::grpc::experimental::ClientReadReactor< ::techmo::tribune::SynthesizeResponse>* reactor) override;
      void Synthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest* request, ::techmo::tribune::SynthesizeResponse* response, std::function<void(::grpc::Status)>) override;
      void Synthesize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::techmo::tribune::SynthesizeResponse* response, std::function<void(::grpc::Status)>) override;
      void Synthesize(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest* request, ::techmo::tribune::SynthesizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Synthesize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::techmo::tribune::SynthesizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::techmo::tribune::ListVoicesResponse>* AsyncListVoicesRaw(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tribune::ListVoicesResponse>* PrepareAsyncListVoicesRaw(::grpc::ClientContext* context, const ::techmo::tribune::ListVoicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::techmo::tribune::SynthesizeResponse>* SynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request) override;
    ::grpc::ClientAsyncReader< ::techmo::tribune::SynthesizeResponse>* AsyncSynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::techmo::tribune::SynthesizeResponse>* PrepareAsyncSynthesizeStreamingRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tribune::SynthesizeResponse>* AsyncSynthesizeRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::techmo::tribune::SynthesizeResponse>* PrepareAsyncSynthesizeRaw(::grpc::ClientContext* context, const ::techmo::tribune::SynthesizeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListVoices_;
    const ::grpc::internal::RpcMethod rpcmethod_SynthesizeStreaming_;
    const ::grpc::internal::RpcMethod rpcmethod_Synthesize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all available voices which can be used to synthesize speech.
    virtual ::grpc::Status ListVoices(::grpc::ServerContext* context, const ::techmo::tribune::ListVoicesRequest* request, ::techmo::tribune::ListVoicesResponse* response);
    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (streaming version, one or more response packets) or `error`.
    virtual ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* context, const ::techmo::tribune::SynthesizeRequest* request, ::grpc::ServerWriter< ::techmo::tribune::SynthesizeResponse>* writer);
    // Synthesizes the speech (audio signal) based on the requested phrase and the optional configuration.
    // Returns audio signal with synthesized speech (non-streaming version, always one repsonse packet) or `error`.
    virtual ::grpc::Status Synthesize(::grpc::ServerContext* context, const ::techmo::tribune::SynthesizeRequest* request, ::techmo::tribune::SynthesizeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListVoices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tribune::ListVoicesRequest* /*request*/, ::techmo::tribune::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVoices(::grpc::ServerContext* context, ::techmo::tribune::ListVoicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::techmo::tribune::ListVoicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SynthesizeStreaming() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tribune::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesizeStreaming(::grpc::ServerContext* context, ::techmo::tribune::SynthesizeRequest* request, ::grpc::ServerAsyncWriter< ::techmo::tribune::SynthesizeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Synthesize() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::techmo::tribune::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesize(::grpc::ServerContext* context, ::techmo::tribune::SynthesizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::techmo::tribune::SynthesizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListVoices<WithAsyncMethod_SynthesizeStreaming<WithAsyncMethod_Synthesize<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListVoices() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::techmo::tribune::ListVoicesRequest, ::techmo::tribune::ListVoicesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::techmo::tribune::ListVoicesRequest* request,
                 ::techmo::tribune::ListVoicesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListVoices(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListVoices(
        ::grpc::experimental::MessageAllocator< ::techmo::tribune::ListVoicesRequest, ::techmo::tribune::ListVoicesResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::techmo::tribune::ListVoicesRequest, ::techmo::tribune::ListVoicesResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tribune::ListVoicesRequest* /*request*/, ::techmo::tribune::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tribune::ListVoicesRequest* /*request*/, ::techmo::tribune::ListVoicesResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SynthesizeStreaming() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::techmo::tribune::SynthesizeRequest, ::techmo::tribune::SynthesizeResponse>(
          [this] { return this->SynthesizeStreaming(); }));
    }
    ~ExperimentalWithCallbackMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tribune::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::techmo::tribune::SynthesizeRequest, ::techmo::tribune::SynthesizeResponse>* SynthesizeStreaming() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::techmo::tribune::SynthesizeRequest, ::techmo::tribune::SynthesizeResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Synthesize() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::techmo::tribune::SynthesizeRequest, ::techmo::tribune::SynthesizeResponse>(
          [this](::grpc::ServerContext* context,
                 const ::techmo::tribune::SynthesizeRequest* request,
                 ::techmo::tribune::SynthesizeResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Synthesize(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Synthesize(
        ::grpc::experimental::MessageAllocator< ::techmo::tribune::SynthesizeRequest, ::techmo::tribune::SynthesizeResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::techmo::tribune::SynthesizeRequest, ::techmo::tribune::SynthesizeResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::techmo::tribune::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::techmo::tribune::SynthesizeResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ListVoices<ExperimentalWithCallbackMethod_SynthesizeStreaming<ExperimentalWithCallbackMethod_Synthesize<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListVoices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tribune::ListVoicesRequest* /*request*/, ::techmo::tribune::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SynthesizeStreaming() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tribune::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Synthesize() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::techmo::tribune::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListVoices() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tribune::ListVoicesRequest* /*request*/, ::techmo::tribune::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListVoices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SynthesizeStreaming() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tribune::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesizeStreaming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Synthesize() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::techmo::tribune::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynthesize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListVoices() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListVoices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tribune::ListVoicesRequest* /*request*/, ::techmo::tribune::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListVoices(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SynthesizeStreaming() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SynthesizeStreaming(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tribune::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SynthesizeStreaming() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Synthesize() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Synthesize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::techmo::tribune::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Synthesize(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListVoices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::techmo::tribune::ListVoicesRequest, ::techmo::tribune::ListVoicesResponse>(std::bind(&WithStreamedUnaryMethod_ListVoices<BaseClass>::StreamedListVoices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListVoices(::grpc::ServerContext* /*context*/, const ::techmo::tribune::ListVoicesRequest* /*request*/, ::techmo::tribune::ListVoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListVoices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::techmo::tribune::ListVoicesRequest,::techmo::tribune::ListVoicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Synthesize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Synthesize() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::techmo::tribune::SynthesizeRequest, ::techmo::tribune::SynthesizeResponse>(std::bind(&WithStreamedUnaryMethod_Synthesize<BaseClass>::StreamedSynthesize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Synthesize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Synthesize(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::techmo::tribune::SynthesizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSynthesize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::techmo::tribune::SynthesizeRequest,::techmo::tribune::SynthesizeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListVoices<WithStreamedUnaryMethod_Synthesize<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SynthesizeStreaming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SynthesizeStreaming() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::techmo::tribune::SynthesizeRequest, ::techmo::tribune::SynthesizeResponse>(std::bind(&WithSplitStreamingMethod_SynthesizeStreaming<BaseClass>::StreamedSynthesizeStreaming, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SynthesizeStreaming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SynthesizeStreaming(::grpc::ServerContext* /*context*/, const ::techmo::tribune::SynthesizeRequest* /*request*/, ::grpc::ServerWriter< ::techmo::tribune::SynthesizeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSynthesizeStreaming(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::techmo::tribune::SynthesizeRequest,::techmo::tribune::SynthesizeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SynthesizeStreaming<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListVoices<WithSplitStreamingMethod_SynthesizeStreaming<WithStreamedUnaryMethod_Synthesize<Service > > > StreamedService;
};

}  // namespace tribune
}  // namespace techmo


#endif  // GRPC_tribune_5ftts_2eproto__INCLUDED
